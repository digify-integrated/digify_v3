SYSTEM TABLE:


























/* =============================================================================================
  TABLE: PRODUCT
============================================================================================= */

DROP TABLE IF EXISTS product;

CREATE TABLE product (
  product_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  product_name VARCHAR(100) NOT NULL,
  product_description VARCHAR(1000) NOT NULL,
  product_image VARCHAR(500),
  product_type ENUM('Combo', 'Goods','Services') DEFAULT 'Goods',
  sku VARCHAR(200) UNIQUE,
  barcode VARCHAR(200) UNIQUE,
  is_sellable ENUM('Yes','No') DEFAULT 'Yes',
  is_purchasable ENUM('Yes','No') DEFAULT 'Yes',
  show_on_pos ENUM('Yes','No') DEFAULT 'Yes',
  quantity_on_hand INT DEFAULT 0,
  sales_price DECIMAL(12,2) DEFAULT 0,
  cost DECIMAL(12,2) DEFAULT 0,
  weight DECIMAL(10,2) DEFAULT 0,
  width DECIMAL(10,2) DEFAULT 0,
  height DECIMAL(10,2) DEFAULT 0,
  length DECIMAL(10,2) DEFAULT 0,
  product_status ENUM('Active','Archived') DEFAULT 'Active',
  created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  last_log_by INT UNSIGNED DEFAULT 1,
  FOREIGN KEY (last_log_by) REFERENCES user_account(user_account_id)
);

/* =============================================================================================
  INDEX: PRODUCT
============================================================================================= */

CREATE INDEX idx_product_product_type ON product(product_type);
CREATE INDEX idx_product_barcode ON product(barcode);
CREATE INDEX idx_product_sku ON product(sku);
CREATE INDEX idx_product_is_sellable ON product(is_sellable);
CREATE INDEX idx_product_is_purchasable ON product(is_purchasable);
CREATE INDEX idx_product_show_on_pos ON product(show_on_pos);
CREATE INDEX idx_product_discount_type ON product(discount_type);

/* =============================================================================================
  INITIAL VALUES: PRODUCT
============================================================================================= */

/* =============================================================================================
  END OF TABLE DEFINITIONS
============================================================================================= */



/* =============================================================================================
  TABLE: PRODUCT TAX
============================================================================================= */

DROP TABLE IF EXISTS product_tax;

CREATE TABLE product_tax (
  product_tax_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  product_id INT UNSIGNED NOT NULL,
  product_name VARCHAR(100) NOT NULL,
  tax_type ENUM('Purchases','Sales'), 
  tax_id INT UNSIGNED NOT NULL,
  tax_name VARCHAR(100) NOT NULL,
  created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  last_log_by INT UNSIGNED DEFAULT 1,
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (tax_id) REFERENCES tax(tax_id),
  FOREIGN KEY (last_log_by) REFERENCES user_account(user_account_id)
);

/* =============================================================================================
  INDEX: PRODUCT TAX
============================================================================================= */

CREATE INDEX idx_product_tax_product_id ON product_tax(product_id);
CREATE INDEX idx_product_tax_tax_type ON product_tax(tax_type);

/* =============================================================================================
  INITIAL VALUES: PRODUCT TAX
============================================================================================= */



/* =============================================================================================
  TABLE: PRODUCT CATEGORY MAP
============================================================================================= */

DROP TABLE IF EXISTS product_category_map;

CREATE TABLE product_category_map (
  product_category_map_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  product_id INT UNSIGNED NOT NULL,
  product_name VARCHAR(100) NOT NULL,
  product_category_id INT UNSIGNED NOT NULL,
  product_category_name VARCHAR(100) NOT NULL,
  created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  last_log_by INT UNSIGNED DEFAULT 1,
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (product_category_id) REFERENCES product_category(product_category_id),
  FOREIGN KEY (last_log_by) REFERENCES user_account(user_account_id)
);

/* =============================================================================================
  INDEX: PRODUCT CATEGORY MAP
============================================================================================= */

CREATE INDEX idx_product_category_map_product_id ON product_category_map(product_id);
CREATE INDEX idx_product_category_map_category_id ON product_category_map(product_category_id);

/* =============================================================================================
  INITIAL VALUES: PRODUCT CATEGORY MAP
============================================================================================= */


STORED PROCEDURE





















/* =============================================================================================
   STORED PROCEDURE: PRODUCT
============================================================================================= */

/* =============================================================================================
   SECTION 1: SAVE PROCEDURES
============================================================================================= */

/* =============================================================================================
   SECTION 2: INSERT PROCEDURES
============================================================================================= */

DROP PROCEDURE IF EXISTS insertProduct//

CREATE PROCEDURE insertProduct(
    IN p_product_name VARCHAR(100),
    IN p_product_description VARCHAR(1000),
    IN p_last_log_by INT
)
BEGIN
    DECLARE v_new_product_id INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    INSERT INTO product (
        product_name,
        product_description,
        last_log_by
    ) 
    VALUES(
        p_product_name,
        p_product_description,
        p_last_log_by
    );

    SET v_new_product_id = LAST_INSERT_ID();

    COMMIT;

    SELECT v_new_product_id AS new_product_id;
END //

DROP PROCEDURE IF EXISTS insertProductCategoryMap//

CREATE PROCEDURE insertProductCategoryMap(
    IN p_product_id INT, 
    IN p_product_name VARCHAR(100), 
    IN p_product_category_id INT, 
    IN p_product_category_name VARCHAR(100), 
    IN p_last_log_by INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    INSERT INTO product_category_map (
        product_id,
        product_name,
        product_category_id,
        product_category_name,
        last_log_by
    ) 
    VALUES(
        p_product_id,
        p_product_name,
        p_product_category_id,
        p_product_category_name,
        p_last_log_by
    );

    COMMIT;
END //

DROP PROCEDURE IF EXISTS insertProductTax//

CREATE PROCEDURE insertProductTax(
    IN p_product_id INT, 
    IN p_product_name VARCHAR(100), 
    IN p_tax_type VARCHAR(50), 
    IN p_tax_id INT, 
    IN p_tax_name VARCHAR(100), 
    IN p_last_log_by INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    INSERT INTO product_tax (
        product_id,
        product_name,
        tax_type,
        tax_id,
        tax_name,
        last_log_by
    ) 
    VALUES(
        p_product_id,
        p_product_name,
        p_tax_type,
        p_tax_id,
        p_tax_name,
        p_last_log_by
    );

    COMMIT;
END //

/* =============================================================================================
   SECTION 3: UPDATE PROCEDURES
=============================================================================================  */

DROP PROCEDURE IF EXISTS updateProductGeneral//

CREATE PROCEDURE updateProductGeneral(
	IN p_product_id INT, 
	IN p_product_name VARCHAR(100), 
	IN p_product_description VARCHAR(1000), 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET product_name  = p_product_name,
        product_description  = p_product_description,
        last_log_by     = p_last_log_by
    WHERE product_id   = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductInventory//

CREATE PROCEDURE updateProductInventory(
	IN p_product_id INT, 
	IN p_sku VARCHAR(200), 
	IN p_barcode VARCHAR(200), 
	IN p_product_type VARCHAR(50), 
	IN p_quantity_on_hand INT, 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET sku                 = p_sku,
        barcode             = p_barcode,
        product_type        = p_product_type,
        quantity_on_hand    = p_quantity_on_hand,
        last_log_by         = p_last_log_by
    WHERE product_id        = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductPricing//

CREATE PROCEDURE updateProductPricing(
	IN p_product_id INT, 
	IN p_sales_price DECIMAL(12,2), 
	IN p_discount_type VARCHAR(50), 
	IN p_discount_rate DECIMAL(5,2),
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET sales_price     = p_sales_price,
        discount_type   = p_discount_type,
        discount_rate   = p_discount_rate,
        last_log_by     = p_last_log_by
    WHERE product_id    = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductShipping//

CREATE PROCEDURE updateProductShipping(
	IN p_product_id INT, 
	IN p_weight DECIMAL(10,2), 
	IN p_width DECIMAL(10,2), 
	IN p_height DECIMAL(10,2), 
	IN p_length DECIMAL(10,2), 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET weight          = p_weight,
        width           = p_width,
        height          = p_height,
        length          = p_length,
        last_log_by     = p_last_log_by
    WHERE product_id    = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductArchive//

CREATE PROCEDURE updateProductArchive(
	IN p_product_id INT, 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET product_status  = 'Archived',
        last_log_by     = p_last_log_by
    WHERE product_id    = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductUnarchive//

CREATE PROCEDURE updateProductUnarchive(
	IN p_product_id INT, 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET product_status  = 'Active',
        last_log_by     = p_last_log_by
    WHERE product_id    = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductImage//

CREATE PROCEDURE updateProductImage(
	IN p_product_id INT, 
	IN p_product_image VARCHAR(500), 
	IN p_last_log_by INT
)
BEGIN
 	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE product
    SET product_image  = p_product_image,
        last_log_by     = p_last_log_by
    WHERE product_id   = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS updateProductSettings //

CREATE PROCEDURE updateProductSettings (
    IN p_product_id INT, 
    IN p_value VARCHAR(500),
    IN p_update_type VARCHAR(50),
    IN p_last_log_by INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    CASE p_update_type
        WHEN 'is sellable' THEN
            UPDATE product
            SET is_sellable     = p_value,
                last_log_by     = p_last_log_by
            WHERE product_id    = p_product_id;

        WHEN 'is purchasable' THEN
            UPDATE product
            SET is_purchasable  = p_value,
                last_log_by     = p_last_log_by
            WHERE product_id    = p_product_id;

        ELSE
            UPDATE product
            SET show_on_pos     = p_value,
                last_log_by     = p_last_log_by
            WHERE product_id    = p_product_id;
    END CASE;

    COMMIT;
END //

/* =============================================================================================
   SECTION 4: FETCH PROCEDURES
============================================================================================= */

DROP PROCEDURE IF EXISTS fetchProduct//

CREATE PROCEDURE fetchProduct(
    IN p_product_id INT
)
BEGIN
	SELECT * FROM product
	WHERE product_id = p_product_id
    LIMIT 1;
END //

DROP PROCEDURE IF EXISTS fetchProductCategoryMap//

CREATE PROCEDURE fetchProductCategoryMap(
	IN p_product_id INT
)
BEGIN
	SELECT * FROM product_category_map
	WHERE product_id = p_product_id;
END //

DROP PROCEDURE IF EXISTS fetchProductTax//

CREATE PROCEDURE fetchProductTax(
	IN p_product_id INT,
    IN p_tax_type VARCHAR(50)
)
BEGIN
	SELECT * FROM product_tax
	WHERE product_id = p_product_id AND tax_type = p_tax_type;
END //

/* =============================================================================================
   SECTION 5: DELETE PROCEDURES
============================================================================================= */

DROP PROCEDURE IF EXISTS deleteProductCategoryMap//

CREATE PROCEDURE deleteProductCategoryMap(
    IN p_product_id INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    DELETE FROM product_category_map 
    WHERE product_id = p_product_id;

    COMMIT;
END //

DROP PROCEDURE IF EXISTS deleteProductTax//

CREATE PROCEDURE deleteProductTax(
    IN p_product_id INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    DELETE FROM product_tax 
    WHERE product_id = p_product_id;

    COMMIT;
END //

/* =============================================================================================
   SECTION 6: CHECK PROCEDURES
============================================================================================= */

DROP PROCEDURE IF EXISTS checkProductExist//

CREATE PROCEDURE checkProductExist(
    IN p_product_id INT
)
BEGIN
	SELECT COUNT(*) AS total
    FROM product
    WHERE product_id = p_product_id;
END //

CREATE PROCEDURE checkProductSKUExist(
	IN p_product_id INT,
    IN p_sku VARCHAR(200)
)
BEGIN
	SELECT COUNT(*) AS total
    FROM product
    WHERE product_id != p_product_id 
    AND sku = p_sku;
END //

CREATE PROCEDURE checkProductBarcodeExist(
	IN p_product_id INT,
    IN p_barcode VARCHAR(200)
)
BEGIN
	SELECT COUNT(*) AS total
    FROM product
    WHERE product_id != p_product_id 
    AND barcode = p_barcode;
END //

/* =============================================================================================
   SECTION 7: GENERATE PROCEDURES
============================================================================================= */

DROP PROCEDURE IF EXISTS generateProductCard//

CREATE PROCEDURE generateProductCard(
    IN p_search_value TEXT,
    IN p_filter_by_product_type TEXT,
    IN p_filter_by_product_category TEXT,
    IN p_filter_by_is_sellable TEXT,
    IN p_filter_by_is_purchasable TEXT,
    IN p_filter_by_show_on_pos TEXT,
    IN p_filter_by_product_status TEXT,
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    DECLARE query TEXT;

    -- Base query
    SET query = 'SELECT product_id, product_image, product_name, product_description, product_type, sku, barcode, is_sellable, is_purchasable, show_on_pos, quantity_on_hand, sales_price, cost, product_status
                FROM product
                WHERE 1=1';

    -- Search filter
    IF p_search_value IS NOT NULL AND p_search_value <> '' THEN
        SET query = CONCAT(query, ' 
            AND (
                product_name LIKE ? OR
                product_description LIKE ? OR
                sku LIKE ? OR
                barcode LIKE ?
            )');
    END IF;

    -- Dynamic filters
    IF p_filter_by_product_type IS NOT NULL AND p_filter_by_product_type <> '' THEN
        SET query = CONCAT(query, ' AND product_type IN (', p_filter_by_product_type, ')');
    END IF;

    IF p_filter_by_product_category IS NOT NULL AND p_filter_by_product_category <> '' THEN
        SET query = CONCAT(query, ' AND product_id IN (SELECT product_id FROM product_category_map WHERE product_category_id IN (', p_filter_by_product_category, '))');
    END IF;

    IF p_filter_by_is_sellable IS NOT NULL AND p_filter_by_is_sellable <> '' THEN
        SET query = CONCAT(query, ' AND is_sellable IN (', p_filter_by_is_sellable, ')');
    END IF;

    IF p_filter_by_is_purchasable IS NOT NULL AND p_filter_by_is_purchasable <> '' THEN
        SET query = CONCAT(query, ' AND is_purchasable IN (', p_filter_by_is_purchasable, ')');
    END IF;

    IF p_filter_by_show_on_pos IS NOT NULL AND p_filter_by_show_on_pos <> '' THEN
        SET query = CONCAT(query, ' AND show_on_pos IN (', p_filter_by_show_on_pos, ')');
    END IF;

    IF p_filter_by_product_status IS NOT NULL AND p_filter_by_product_status <> '' THEN
        SET query = CONCAT(query, ' AND product_status IN (', p_filter_by_product_status, ')');
    END IF;

    -- Final ordering + limit
    SET query = CONCAT(query, ' ORDER BY product_name LIMIT ?, ?');

    PREPARE stmt FROM query;

    -- Bind parameters for search + pagination
    IF p_search_value IS NOT NULL AND p_search_value <> '' THEN
        SET @s1 = CONCAT('%', p_search_value, '%');
        SET @s2 = @s1; SET @s3 = @s1; SET @s4 = @s1;
        SET @offset = p_offset;
        SET @limit  = p_limit;

        EXECUTE stmt USING @s1, @s2, @s3, @s4, @offset, @limit;
    ELSE
        SET @offset = p_offset;
        SET @limit  = p_limit;

        EXECUTE stmt USING @offset, @limit;
    END IF;

    DEALLOCATE PREPARE stmt;
END //

DROP PROCEDURE IF EXISTS generateProductTable//

CREATE PROCEDURE generateProductTable(
    IN p_filter_by_product_type TEXT,
    IN p_filter_by_product_category TEXT,
    IN p_filter_by_is_sellable TEXT,
    IN p_filter_by_is_purchasable TEXT,
    IN p_filter_by_show_on_pos TEXT,
    IN p_filter_by_product_status TEXT
)
BEGIN
    DECLARE query TEXT DEFAULT 
        'SELECT product_id, product_image, product_name, product_description, product_type, sku, barcode, is_sellable, is_purchasable, show_on_pos, quantity_on_hand, sales_price, cost, product_status
        FROM product WHERE 1=1';

     IF p_filter_by_product_type IS NOT NULL AND p_filter_by_product_type <> '' THEN
        SET query = CONCAT(query, ' AND product_type IN (', p_filter_by_product_type, ')');
    END IF;

    IF p_filter_by_product_category IS NOT NULL AND p_filter_by_product_category <> '' THEN
        SET query = CONCAT(query, ' AND product_id IN (SELECT product_id FROM product_category_map WHERE product_category_id IN (', p_filter_by_product_category, '))');
    END IF;

    IF p_filter_by_is_sellable IS NOT NULL AND p_filter_by_is_sellable <> '' THEN
        SET query = CONCAT(query, ' AND is_sellable IN (', p_filter_by_is_sellable, ')');
    END IF;

    IF p_filter_by_is_purchasable IS NOT NULL AND p_filter_by_is_purchasable <> '' THEN
        SET query = CONCAT(query, ' AND is_purchasable IN (', p_filter_by_is_purchasable, ')');
    END IF;

    IF p_filter_by_show_on_pos IS NOT NULL AND p_filter_by_show_on_pos <> '' THEN
        SET query = CONCAT(query, ' AND show_on_pos IN (', p_filter_by_show_on_pos, ')');
    END IF;

    IF p_filter_by_product_status IS NOT NULL AND p_filter_by_product_status <> '' THEN
        SET query = CONCAT(query, ' AND product_status IN (', p_filter_by_product_status, ')');
    END IF;

    SET query = CONCAT(query, ' ORDER BY product_name');

    PREPARE stmt FROM query;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

/* =============================================================================================
   END OF PROCEDURES
============================================================================================= */

TRIGGERS


















/* =============================================================================================
   TRIGGER: PRODUCT
============================================================================================= */

/* =============================================================================================
   SECTION 1: UPDATE TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_update//

CREATE TRIGGER trg_product_update
AFTER UPDATE ON product
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product changed.<br/><br/>';

    IF NEW.product_name <> OLD.product_name THEN
        SET audit_log = CONCAT(audit_log, "Product Name: ", OLD.product_name, " -> ", NEW.product_name, "<br/>");
    END IF;

    IF NEW.product_description <> OLD.product_description THEN
        SET audit_log = CONCAT(audit_log, "Product Description: ", OLD.product_description, " -> ", NEW.product_description, "<br/>");
    END IF;

    IF NEW.product_type <> OLD.product_type THEN
        SET audit_log = CONCAT(audit_log, "Product Type: ", OLD.product_type, " -> ", NEW.product_type, "<br/>");
    END IF;

    IF NEW.sku <> OLD.sku THEN
        SET audit_log = CONCAT(audit_log, "SKU: ", OLD.sku, " -> ", NEW.sku, "<br/>");
    END IF;

    IF NEW.barcode <> OLD.barcode THEN
        SET audit_log = CONCAT(audit_log, "Barcode: ", OLD.barcode, " -> ", NEW.barcode, "<br/>");
    END IF;

    IF NEW.is_sellable <> OLD.is_sellable THEN
        SET audit_log = CONCAT(audit_log, "Is Sellable: ", OLD.is_sellable, " -> ", NEW.is_sellable, "<br/>");
    END IF;

    IF NEW.is_purchasable <> OLD.is_purchasable THEN
        SET audit_log = CONCAT(audit_log, "Is Purchasable: ", OLD.is_purchasable, " -> ", NEW.is_purchasable, "<br/>");
    END IF;

    IF NEW.show_on_pos <> OLD.show_on_pos THEN
        SET audit_log = CONCAT(audit_log, "Show on POS: ", OLD.show_on_pos, " -> ", NEW.show_on_pos, "<br/>");
    END IF;

    IF NEW.quantity_on_hand <> OLD.quantity_on_hand THEN
        SET audit_log = CONCAT(audit_log, "Quantity On Hand: ", OLD.quantity_on_hand, " -> ", NEW.quantity_on_hand, "<br/>");
    END IF;

    IF NEW.sales_price <> OLD.sales_price THEN
        SET audit_log = CONCAT(audit_log, "Sales Price: ", OLD.sales_price, " -> ", NEW.sales_price, "<br/>");
    END IF;

    IF NEW.cost <> OLD.cost THEN
        SET audit_log = CONCAT(audit_log, "Cost: ", OLD.cost, " -> ", NEW.cost, "<br/>");
    END IF;

    IF NEW.discount_type <> OLD.discount_type THEN
        SET audit_log = CONCAT(audit_log, "Discount Type: ", OLD.discount_type, " -> ", NEW.discount_type, "<br/>");
    END IF;

    IF NEW.discount_rate <> OLD.discount_rate THEN
        SET audit_log = CONCAT(audit_log, "Discount Rate: ", OLD.discount_rate, " -> ", NEW.discount_rate, "<br/>");
    END IF;

    IF NEW.weight <> OLD.weight THEN
        SET audit_log = CONCAT(audit_log, "Weight: ", OLD.weight, " -> ", NEW.weight, " kg<br/>");
    END IF;

    IF NEW.width <> OLD.width THEN
        SET audit_log = CONCAT(audit_log, "Width: ", OLD.width, " -> ", NEW.width, " cm<br/>");
    END IF;

    IF NEW.height <> OLD.height THEN
        SET audit_log = CONCAT(audit_log, "Height: ", OLD.height, " -> ", NEW.height, " cm<br/>");
    END IF;

    IF NEW.length <> OLD.length THEN
        SET audit_log = CONCAT(audit_log, "Length: ", OLD.length, " -> ", NEW.length, " cm<br/>");
    END IF;

    IF NEW.product_status <> OLD.product_status THEN
        SET audit_log = CONCAT(audit_log, "Product Status: ", OLD.product_status, " -> ", NEW.product_status, "<br/>");
    END IF;
    
    IF audit_log <> 'Product changed.<br/><br/>' THEN
        INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
        VALUES ('product', NEW.product_id, audit_log, NEW.last_log_by, NOW());
    END IF;
END //

/* =============================================================================================
   SECTION 2: INSERT TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_insert//

CREATE TRIGGER trg_product_insert
AFTER INSERT ON product
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product created.';

    INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
    VALUES ('product', NEW.product_id, audit_log, NEW.last_log_by, NOW());
END //

/* =============================================================================================
   END OF TRIGGERS
============================================================================================= */



/* =============================================================================================
   TRIGGER: PRODUCT TAX
============================================================================================= */

/* =============================================================================================
   SECTION 1: UPDATE TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_tax_update//

CREATE TRIGGER trg_product_tax_update
AFTER UPDATE ON product_tax
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product tax changed.<br/><br/>';

    IF NEW.product_name <> OLD.product_name THEN
        SET audit_log = CONCAT(audit_log, "Product: ", OLD.product_name, " -> ", NEW.product_name, "<br/>");
    END IF;

    IF NEW.tax_type <> OLD.tax_type THEN
        SET audit_log = CONCAT(audit_log, "Tax Type: ", OLD.tax_type, " -> ", NEW.tax_type, "<br/>");
    END IF;

    IF NEW.tax_name <> OLD.tax_name THEN
        SET audit_log = CONCAT(audit_log, "Tax: ", OLD.tax_name, " -> ", NEW.tax_name, "<br/>");
    END IF;
    
    IF audit_log <> 'Product tax changed.<br/><br/>' THEN
        INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
        VALUES ('product_tax', NEW.product_tax_id, audit_log, NEW.last_log_by, NOW());
    END IF;
END //

/* =============================================================================================
   SECTION 2: INSERT TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_tax_insert//

CREATE TRIGGER trg_product_tax_insert
AFTER INSERT ON product_tax
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product tax created.';

    INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
    VALUES ('product_tax', NEW.product_tax_id, audit_log, NEW.last_log_by, NOW());
END //

/* =============================================================================================
   END OF TRIGGERS
============================================================================================= */



/* =============================================================================================
   TRIGGER: PRODUCT CATEGORIES
============================================================================================= */

/* =============================================================================================
   SECTION 1: UPDATE TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_categories_update//

CREATE TRIGGER trg_product_categories_update
AFTER UPDATE ON product_categories
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product categories changed.<br/><br/>';

    IF NEW.product_name <> OLD.product_name THEN
        SET audit_log = CONCAT(audit_log, "Product: ", OLD.product_name, " -> ", NEW.product_name, "<br/>");
    END IF;

    IF NEW.product_category_name <> OLD.product_category_name THEN
        SET audit_log = CONCAT(audit_log, "Product Category: ", OLD.product_category_name, " -> ", NEW.product_category_name, "<br/>");
    END IF;
    
    IF audit_log <> 'Product categories changed.<br/><br/>' THEN
        INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
        VALUES ('product_categories', NEW.product_categories_id, audit_log, NEW.last_log_by, NOW());
    END IF;
END //

/* =============================================================================================
   SECTION 2: INSERT TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_categories_insert//

CREATE TRIGGER trg_product_categories_insert
AFTER INSERT ON product_categories
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product categories created.';

    INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
    VALUES ('product_categories', NEW.product_categories_id, audit_log, NEW.last_log_by, NOW());
END //

/* =============================================================================================
   END OF TRIGGERS
============================================================================================= */



/* =============================================================================================
   TRIGGER: PRODUCT VARIANT
============================================================================================= */

/* =============================================================================================
   SECTION 1: UPDATE TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_variant_update//

CREATE TRIGGER trg_product_variant_update
AFTER UPDATE ON product_variant
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product variant changed.<br/><br/>';

    IF NEW.product_name <> OLD.product_name THEN
        SET audit_log = CONCAT(audit_log, "Product: ", OLD.product_name, " -> ", NEW.product_name, "<br/>");
    END IF;

    IF NEW.attribute_value_name <> OLD.attribute_value_name THEN
        SET audit_log = CONCAT(audit_log, "Attribute Value: ", OLD.attribute_value_name, " -> ", NEW.attribute_value_name, "<br/>");
    END IF;

    IF NEW.attribute_name <> OLD.attribute_name THEN
        SET audit_log = CONCAT(audit_log, "Attribute: ", OLD.attribute_name, " -> ", NEW.attribute_name, "<br/>");
    END IF;

    IF NEW.extra_price <> OLD.extra_price THEN
        SET audit_log = CONCAT(audit_log, "Extra Price: ", OLD.extra_price, " -> ", NEW.extra_price, "<br/>");
    END IF;
    
    IF audit_log <> 'Product variant changed.<br/><br/>' THEN
        INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
        VALUES ('product_variant', NEW.product_variant_id, audit_log, NEW.last_log_by, NOW());
    END IF;
END //

/* =============================================================================================
   SECTION 2: INSERT TRIGGERS
============================================================================================= */

DROP TRIGGER IF EXISTS trg_product_variant_insert//

CREATE TRIGGER trg_product_variant_insert
AFTER INSERT ON product_variant
FOR EACH ROW
BEGIN
    DECLARE audit_log TEXT DEFAULT 'Product variant created.';

    INSERT INTO audit_log (table_name, reference_id, log, changed_by, changed_at) 
    VALUES ('product_variant', NEW.product_variant_id, audit_log, NEW.last_log_by, NOW());
END //

/* =============================================================================================
   END OF TRIGGERS
============================================================================================= */